{"version":3,"file":"static/js/567.18130470.chunk.js","mappings":"+NAcA,MAmFA,EAnFwBA,IAA+B,IAA9B,OAAEC,EAAM,aAAEC,GAAcF,EAC/C,MAAM,WAAEG,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAC3BC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAE3BC,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,IACGC,MAAMC,QAAQV,KACdS,MAAMC,QAAQX,IACS,IAAxBC,EAAaW,QACK,IAAlBZ,EAAOY,OAEP,MAAO,GAST,OAPkBX,EAAaY,KAAKC,IAClC,MAAMC,EAAQf,EAAOgB,QAClBC,GAAUA,EAAMH,WAAaA,IAC9BF,OAEF,MAAO,CAAEM,KADIJ,EAASK,MAAM,UAAU,GACvBJ,QAAO,GAER,GACf,CAACd,EAAcD,IAMlB,OAJAoB,EAAAA,EAAAA,YAAU,KACRd,EAAQE,EAAQ,GACf,CAACA,IAEgB,IAAhBH,EAAKO,QACAS,EAAAA,EAAAA,KAAA,OAAAC,SAAK,iCAGZD,EAAAA,EAAAA,KAACE,EAAAA,EAAmB,CAACC,MAAM,MAAMC,OAAQ,IAAIH,UAC3CI,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,MAAO,CACLC,gBAAiB3B,EAAa,UAAY,WAE5C4B,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,MAAO,IACPZ,SAAA,EAEFD,EAAAA,EAAAA,KAACc,EAAAA,EAAa,CAACC,OAAQlC,EAAa,UAAY,UAChDmB,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CACJC,KAAK,WACLC,QAAQ,OACRC,KAAK,OACLC,MAAO,GACPC,SAAU,EACVC,KAAM,CAAEC,GAAI,EAAGC,WAAY,QAASC,UAAW,oBAC/CV,OAAQlC,EAAa,UAAY,UAEnCmB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAK,CACJT,KAAK,SACLC,QAAQ,QACRC,KAAK,mBACLQ,eAAe,EACfZ,OAAQlC,EAAa,UAAY,OACjC+C,MAAO,CACLC,MAAO,mBACPT,OAAQ,GACRU,SAAU,iBAGd9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CACNC,OAAQ,CAAEC,gBAAiB,OAC3BC,aAAc,CACZ1B,gBAAiB3B,EAAa,UAAY,OAC1CsD,MAAOtD,EAAa,UAAY,OAChCuD,OAAQ,cAAavD,EAAa,UAAY,YAGlDmB,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CACNlB,KAAK,iBACLnC,KAAMA,EACNsD,KAAMzD,EAAa,UAAY,gBAGf,C","sources":["components/CityEventsChart.js"],"sourcesContent":["// src/components/CityEventsChart.js\r\n\r\nimport React, { useState, useEffect, useMemo, useContext } from \"react\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\n\r\nconst CityEventsChart = ({ events, allLocations }) => {\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useMemo(() => {\r\n    if (\r\n      !Array.isArray(allLocations) ||\r\n      !Array.isArray(events) ||\r\n      allLocations.length === 0 ||\r\n      events.length === 0\r\n    ) {\r\n      return [];\r\n    }\r\n    const chartData = allLocations.map((location) => {\r\n      const count = events.filter(\r\n        (event) => event.location === location\r\n      ).length;\r\n      const city = location.split(/, | - /)[0];\r\n      return { city, count };\r\n    });\r\n    return chartData;\r\n  }, [allLocations, events]);\r\n\r\n  useEffect(() => {\r\n    setData(getData);\r\n  }, [getData]);\r\n\r\n  if (data.length === 0) {\r\n    return <div>No data available for chart</div>;\r\n  }\r\n  return (\r\n    <ResponsiveContainer width=\"99%\" height={400}>\r\n      <ScatterChart\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#4A6987\" : \"#FFEEE6\",\r\n        }}\r\n        margin={{\r\n          top: 20,\r\n          right: 20,\r\n          bottom: 65,\r\n          left: -30,\r\n        }}\r\n      >\r\n        <CartesianGrid stroke={isDarkMode ? \"#495670\" : \"#ccc\"} />\r\n        <XAxis\r\n          type=\"category\"\r\n          dataKey=\"city\"\r\n          name=\"City\"\r\n          angle={45}\r\n          interval={0}\r\n          tick={{ dy: 2, textAnchor: \"start\", transform: \"translate(10, 0)\" }}\r\n          stroke={isDarkMode ? \"#ECF0F1\" : \"#333\"}\r\n        />\r\n        <YAxis\r\n          type=\"number\"\r\n          dataKey=\"count\"\r\n          name=\"Number of Events\"\r\n          allowDecimals={false}\r\n          stroke={isDarkMode ? \"#ECF0F1\" : \"#333\"}\r\n          label={{\r\n            value: \"Number of Events\",\r\n            angle: -90,\r\n            position: \"insideLeft\",\r\n          }}\r\n        />\r\n        <Tooltip\r\n          cursor={{ strokeDasharray: \"3 3\" }}\r\n          contentStyle={{\r\n            backgroundColor: isDarkMode ? \"#FFEEE6\" : \"#fff\",\r\n            color: isDarkMode ? \"#ECF0F1\" : \"#333\",\r\n            border: `1px solid ${isDarkMode ? \"#ECF0F1\" : \"#ccc\"}`,\r\n          }}\r\n        />\r\n        <Scatter\r\n          name=\"Events by City\"\r\n          data={data}\r\n          fill={isDarkMode ? \"#ECF0F1\" : \"#0F4BB8\"}\r\n        />\r\n      </ScatterChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default CityEventsChart;\r\n"],"names":["_ref","events","allLocations","isDarkMode","useContext","ThemeContext","data","setData","useState","getData","useMemo","Array","isArray","length","map","location","count","filter","event","city","split","useEffect","_jsx","children","ResponsiveContainer","width","height","_jsxs","ScatterChart","style","backgroundColor","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","type","dataKey","name","angle","interval","tick","dy","textAnchor","transform","YAxis","allowDecimals","label","value","position","Tooltip","cursor","strokeDasharray","contentStyle","color","border","Scatter","fill"],"sourceRoot":""}