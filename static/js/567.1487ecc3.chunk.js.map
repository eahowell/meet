{"version":3,"file":"static/js/567.1487ecc3.chunk.js","mappings":"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","sources":["components/CityEventsChart.js"],"sourcesContent":["// src/components/CityEventsChart.js\r\n\r\nimport React, { useState, useEffect, useMemo, useContext } from \"react\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\n\r\nconst CityEventsChart = ({ events, allLocations }) => {\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n  const [data, setData] = useState([]);\r\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => setScreenWidth(window.innerWidth);\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  const getData = useMemo(() => {\r\n    if (\r\n      !Array.isArray(allLocations) ||\r\n      !Array.isArray(events) ||\r\n      allLocations.length === 0 ||\r\n      events.length === 0\r\n    ) {\r\n      return [];\r\n    }\r\n    const chartData = allLocations.map((location) => {\r\n      const count = events.filter(\r\n        (event) => event.location === location\r\n      ).length;\r\n      const city = location.split(/, | - /)[0];\r\n      return { city, count };\r\n    });\r\n    return chartData;\r\n  }, [allLocations, events]);\r\n\r\n  useEffect(() => {\r\n    setData(getData);\r\n  }, [getData]);\r\n\r\n  const CustomXAxisTick = ({ x, y, payload }) => {\r\n    const isVerySmallScreen = screenWidth <= 450;\r\n    const rotationAngle = isVerySmallScreen ? 60 : 45;\r\n    \r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text\r\n          x={0}\r\n          y={0}\r\n          dy={16}\r\n          textAnchor=\"start\"\r\n          stroke={isDarkMode ? \"White\" : \"#333\"}\r\n          transform={`rotate(${rotationAngle})`}\r\n          data-testid={`XAxislabel-${payload.value}`}\r\n          className=\"recharts-text recharts-cartesian-axis-tick-value x-axis-label\"\r\n          style={{ fontSize: isVerySmallScreen ? '10px' : '12px' }}\r\n        >\r\n          {payload.value}\r\n        </text>\r\n      </g>\r\n    );\r\n  };\r\n\r\n  if (data.length === 0) {\r\n    return <div>No data available for chart</div>;\r\n  }\r\n\r\n  const chartMargin = screenWidth <= 450\r\n    ? { top: 10, right: 10, bottom: 40, left: -15 }\r\n    : { top: 20, right: 20, bottom: 50, left: -15 };\r\n  return (\r\n    <div data-testid=\"scatterChart\">\r\n      <div className=\"chartGroup\"># of Events Per Location</div>\r\n    <ResponsiveContainer width=\"99%\" height={400} >\r\n      <ScatterChart\r\n        role=\"graphics-document\"\r\n        \r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#143B5F\" : \"#FFEEE6\",\r\n        }}\r\n        margin={chartMargin}\r\n      >\r\n        <CartesianGrid stroke={isDarkMode ? \"#495670\" : \"#ccc\"} />\r\n        <XAxis\r\n          type=\"category\"\r\n          dataKey=\"city\"\r\n          name=\"City\"\r\n          tick={<CustomXAxisTick />}\r\n          interval={0}\r\n          stroke={isDarkMode ? \"#ECF0F1\" : \"#333\"}\r\n        />\r\n        <YAxis\r\n          type=\"number\"\r\n          dataKey=\"count\"\r\n          name=\"Number of Events\"\r\n          allowDecimals={false}\r\n          stroke={isDarkMode ? \"#ECF0F1\" : \"#333\"}\r\n          label={{\r\n            value: \"Number of Events\",\r\n            angle: -90,\r\n            position: \"center\",\r\n            fill: isDarkMode ? \"white\" : \"#333\", \r\n            style: { fontSize: screenWidth <= 320 ? '12px' : '14px' }\r\n          }}\r\n        />\r\n        <Tooltip\r\n          cursor={{ strokeDasharray: \"3 3\" }}\r\n          contentStyle={{\r\n            backgroundColor: isDarkMode ? \"#FFEEE6\" : \"#fff\",\r\n            color: isDarkMode ? \"#ECF0F1\" : \"#333\",\r\n            border: `1px solid ${isDarkMode ? \"#ECF0F1\" : \"#ccc\"}`,\r\n          }}\r\n        />\r\n        <Scatter\r\n          name=\"Events by City\"\r\n          data={data}\r\n          fill={isDarkMode ? \"#ECF0F1\" : \"#0F4BB8\"}\r\n        />\r\n      </ScatterChart>\r\n    </ResponsiveContainer>\r\n    </div>  \r\n  );\r\n};\r\n\r\nexport default CityEventsChart;\r\n"],"names":["_ref","events","allLocations","isDarkMode","useContext","ThemeContext","data","setData","useState","screenWidth","setScreenWidth","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","getData","useMemo","Array","isArray","length","map","location","count","filter","event","city","split","CustomXAxisTick","_ref2","x","y","payload","isVerySmallScreen","rotationAngle","_jsx","transform","children","dy","textAnchor","stroke","value","className","style","fontSize","chartMargin","top","right","bottom","left","_jsxs","ResponsiveContainer","width","height","ScatterChart","role","backgroundColor","margin","CartesianGrid","XAxis","type","dataKey","name","tick","interval","YAxis","allowDecimals","label","angle","position","fill","Tooltip","cursor","strokeDasharray","contentStyle","color","border","Scatter"],"sourceRoot":""}